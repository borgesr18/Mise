// datasource db define a conexão com nosso banco de dados.
// Usaremos o PostgreSQL do Supabase.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client informa ao Prisma para criar o cliente TypeScript,
// nossa ferramenta para interagir com o banco de dados.
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

//================================================//
//                 MODELOS CENTRAIS               //
//================================================//

// Fornecedores: Quem nos vende os insumos.
model Supplier {
  id            String       @id @default(cuid())
  name          String       @unique
  contactPerson String?
  phone         String?
  email         String?
  notes         String?
  createdAt     DateTime     @default(now())
  ingredients   Ingredient[]
}

// Insumos: Nossos ingredientes e materiais.
model Ingredient {
  id                String             @id @default(cuid())
  name              String             @unique
  category          String
  stockQuantity     Float
  stockUnit         String
  supplierId        String?
  lastPurchasePrice Float
  lowStockThreshold Float?
  createdAt         DateTime           @default(now())
  supplier          Supplier?          @relation(fields: [supplierId], references: [id])
  recipes           RecipeIngredient[]
}

// Ficha Técnica: O coração do sistema. Nossas receitas.
model Recipe {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  tags             String[]
  status           RecipeStatus       @default(DRAFT)
  method           String
  preparationTime  Int?
  cookingTime      Int?
  restingTime      Int?
  yield            Float
  yieldUnit        String
  calculatedCost   Float?
  markup           Float?             @default(3) // NOVO: Fator de markup para o preço
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ingredients      RecipeIngredient[]
  productionOrders ProductionOrder[]
}

// Tabela de Junção: Os ingredientes dentro de cada receita.
model RecipeIngredient {
  recipeId     String
  ingredientId String
  quantity     Float
  notes        String?
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)

  @@id([recipeId, ingredientId])
}

//================================================//
//           MODELOS DE GESTÃO E OPERAÇÃO         //
//================================================//

// Ordens de Produção: Registra tudo que foi produzido.
model ProductionOrder {
  id               String   @id @default(cuid())
  recipeId         String
  quantityProduced Float
  productionDate   DateTime @default(now())
  notes            String?
  recipe           Recipe   @relation(fields: [recipeId], references: [id])
}

// Custos Operacionais: Além dos ingredientes.
model OperationalCost {
  id       String   @id @default(cuid())
  name     String   @unique
  costType CostType
  value    Float
}

//================================================//
//                  ENUMS / TIPOS                 //
//================================================//

// Status para o workflow de criação de receitas
enum RecipeStatus {
  DRAFT
  TESTING
  FINAL
  ARCHIVED
}

// Tipos de custos operacionais
enum CostType {
  FIXED_MONTHLY
  PER_HOUR
}
